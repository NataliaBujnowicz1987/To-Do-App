{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleChecked","handleDate","handleClick","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","htmlFor","style","color","id","min","max","onClick","Component","Task","priorityStyle","_props$task","task","active","priority","finishDate","Fragment","change","delete","actualDate","toLocaleString","TaskList","tasks","filter","done","sort","b","activeTasks","map","components_Task","key","doneTasks","App","counter","deleteTask","Object","toConsumableArray","index","findIndex","splice","changeStatus","newTasks","Array","from","forEach","getTime","addTask","prevState","concat","components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d092f8c5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddTask extends Component {\r\n\r\n    minDate = new Date().toISOString().slice(0, 10);\r\n\r\n    state = {\r\n        text: '',\r\n        checked: false,\r\n        date: this.minDate\r\n    }\r\n\r\n    handleText = (e) => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleChecked = (e) => {\r\n        this.setState({\r\n            checked: e.target.checked\r\n        })\r\n    }\r\n\r\n    handleDate = (e) => {\r\n        this.setState({\r\n            date: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n        const { text, date, checked } = this.state;\r\n\r\n        if (text.length > 2) {\r\n            // here we use props added in app.js (addTask method)\r\n            const add = this.props.add(text, date, checked)\r\n            // if addTask method return true change state\r\n            if (add) {\r\n                this.setState({\r\n                    text: '',\r\n                    checked: false,\r\n                    date: this.minDate\r\n                })\r\n            }\r\n        } else {\r\n            alert('Sorry, this text is too short')\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        // here we set maxDate - to the actual date (here minDate) we use slice method to get only 4 first numbers (year), we multiply it by 1 to change string to number and finally we add 2\r\n        let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n\r\n        maxDate = maxDate + \"-12-31\";\r\n        // result example: 2022-12-31\r\n\r\n        return (\r\n            <div className=\"addTask\">\r\n                <h2>Add your task:</h2>\r\n                <input type=\"text\" placeholder=\"Add a new task\" value={this.state.text} onChange={this.handleText} />\r\n\r\n                <label htmlFor=\"priority\" style={{ color: \"red\" }}> Priority </label>\r\n                <input type=\"checkbox\" checked={this.state.checked} id=\"priority\" onChange={this.handleChecked} />\r\n                <br />\r\n\r\n                <label htmlFor=\"date\">When is deadline? </label>\r\n                <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n                <br />\r\n                <br />\r\n                <button onClick={this.handleClick}>Add a new task</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;\r\n\r\n","import React from 'react';\r\n\r\nconst Task = (props) => {\r\n    const priorityStyle = {\r\n        color: \"red\",\r\n        // textTransform: \"uppercase\"\r\n    }\r\n\r\n    // destructuring props\r\n    const { text, date, id, active, priority, finishDate } = props.task;\r\n\r\n    // if(active === true)\r\n    if (active) {\r\n        return (\r\n            <>\r\n                <div className=\"activeTasks-desktop\">\r\n                    <strong style={priority ? priorityStyle : null}>{text} </strong>\r\n                | Deadline: <span> {date} | </span>\r\n                    {/* <br /> */}\r\n                    <button onClick={() => props.change(id)}>Done</button>\r\n                    <button onClick={() => props.delete(id)}>Delete</button>\r\n                </div>\r\n\r\n                <div className=\"activeTasks-tablet\">\r\n                    <strong style={priority ? priorityStyle : null}>{text} </strong>\r\n                     | Deadline: <span> {date} </span>\r\n                    <br />\r\n                    <button onClick={() => props.change(id)}>Done</button>\r\n                    <button onClick={() => props.delete(id)}>Delete</button>\r\n                </div>\r\n\r\n                <div className=\"activeTasks-mobile\">\r\n                    <strong style={priority ? priorityStyle : null}>{text} </strong>\r\n                    <br />\r\n                    Deadline: <span> {date} </span>\r\n                    <br />\r\n                    <button onClick={() => props.change(id)}>Done</button>\r\n                    <button onClick={() => props.delete(id)}>Delete</button>\r\n                </div>\r\n            </>\r\n\r\n        )\r\n    } else {\r\n        // here we convert milliseconds to readable format using toLocaleString() method\r\n        const actualDate = new Date(finishDate).toLocaleString();\r\n\r\n        return (\r\n            <>\r\n                <div className=\"doneTasks-desktop\">\r\n                    <p>\r\n                        <b>{text}</b> | Deadline: {date}<br />\r\n                        Completed: <span> {actualDate} </span>\r\n                        <button onClick={() => props.delete(id)}>Delete</button>\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"doneTasks-mobile\">\r\n                    <p>\r\n                        <b>{text}</b> <br />\r\n                        Deadline: {date} <br />\r\n                        Completed: <span> {actualDate} </span> <br />\r\n                        <button onClick={() => props.delete(id)}>Delete</button>\r\n                    </p>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task; ","import React from 'react';\r\nimport Task from './Task';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    // we collect props from App.js (tasks) and use filter method that allows create new arrays.\r\n    // the active state is set to true by default. here we divided the tasks into 2 groups - still active and done\r\n    const active = props.tasks.filter(task => task.active);\r\n    const done = props.tasks.filter(task => !task.active);\r\n\r\n    // we sort completed tasks by date of completion (finish Date). First, we compare 2 items from the array and check their finishDate to display the last completed\r\n    done.sort((a, b) => b.finishDate - a.finishDate);\r\n\r\n    // here we sort active task - those with the shortest deadline are displayed at the top\r\n    active.sort((a, b) => {\r\n        if (a.date < b.date) return -1;\r\n        if (a.date > b.date) return 1;\r\n        return 0\r\n    })\r\n\r\n    // now we can work on copied arrays. We use the map method here to work with each single element in array\r\n    const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n    return (\r\n        <>\r\n            <div className=\"activeTask\">\r\n                <h3>To-Do List:</h3>\r\n                {activeTasks.length > 0 ? activeTasks : <p>you don't have any tasks to complete</p>}\r\n            </div>\r\n\r\n            <div className=\"doneTask\">\r\n                <h3>Done tasks: ({done.length})</h3>\r\n                {doneTasks}\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends Component {\n\n  // we set the number of current elements in the array to create the property id for the next object\n  counter = 3;\n\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: 'learn react native',\n        date: '2020-05-30',\n        priority: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: 'create portfolio webpage',\n        date: '2020-06-30',\n        priority: true,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 2,\n        text: 'visit Zermatt',\n        date: '2020-09-30',\n        priority: false,\n        active: true,\n        finishDate: null\n      },\n    ]\n  }\n\n\n  deleteTask = (id) => {\n    // we create a copy of array to work on it\n    const tasks = [...this.state.tasks];\n\n    // using the findIndex method we check the index of the element\n    const index = tasks.findIndex(task => task.id === id);\n\n    // and we remove it from array\n    tasks.splice(index, 1);\n    this.setState({\n      tasks\n    })\n\n    // or we can do the same using filter method:\n    //    let tasks = [...this.state.tasks];\n    //    tasks = tasks.filter(task => task.id !== id);\n\n    //    this.setState({\n    //      tasks: tasks\n    //    })\n\n    // console.log(\"the task has been deleted\");\n  }\n\n  changeStatus = (id) => {\n    // we create a copy of array by using Array.from method\n    const newTasks = Array.from(this.state.tasks);\n    // forEach allow us work on each element in the array\n    newTasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    })\n    this.setState({\n      tasks: newTasks\n    })\n\n    // console.log(\"status has been changed\");\n  }\n\n  // method allows add a new task to the array\n  addTask = (text, date, priority) => {\n    const task = {\n      id: this.counter,\n      text: text,\n      date: date,\n      priority: priority,\n      active: true,\n      finishDate: null\n    }\n    // here we add +1 to next id number\n    this.counter++\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeStatus} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}